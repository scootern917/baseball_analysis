---
title: "The Key to Winning in America's Pastime"
author: "Scooter Norton & Luke Schleck"
date: "12/02/2024"
format: html
---

```{r setup}
#| include: false

knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
options(width = 100,
        scipen = 999999)

suppressPackageStartupMessages(library(tidyverse))
library(openxlsx)
library(ggplot2)
library(kableExtra)
library(dplyr)
library(car)

practice.question.switch <- "TRUE"
```

### Notes from presentations

* Explain why we chose to analyze the MLB
  * What factors did we ignore? (salary, ...)
* Cover collinearity, heteroscedasicity
* Show wins are normally distributed (histogram)
* Explain full model, why we chose to remove runs for/against
* Explain variable selection process

To do list:

* Test on real data (choose example teams that were exceptional, good and bad)
  * Case study
* Stepwise regression without runs
* Test interaction terms
* Test quadratic terms
* Limitations/Challenges


# Introduction

Baseball is the oldest of the four major American Sports, and has been dubbed as America's Pastime for its influence in pop culture, longevity, and continued hold as a premier source of American entertainment. The MLB has run for over 120 years, and like all sports, the ultimate goal is to win. This begs the question: using on-field variables, can we create a model that can accurately predicts a team's wins in a given season?

We used a data set containing team season statistics from 1865-2023.

* To prevent bias in the model, we omitted seasons where fewer than 162 games were played
* We omitted many categorical variables that were not indicative of team success. Some examples include:
  * Year
  * Team ID
  * Park
* We omitted numeric variables we deemed irrelevant to our analysis, such as rank, attendance, 

### Factors that aren't considered

We chose to ignore many variables in our

## Data Cleaning
```{r}
data <- read_csv("lahman_1871-2023_csv/lahman_1871-2023_csv/Teams.csv")
data <- filter(data, G==162)

baseball_data <- select(data, c('W','AB','H','BB','HR','R','RA','SO','SB','2B','3B','ERA','SHO','SV','HRA','BBA','SOA','CG','FP','E'))
bd <- baseball_data
bd
```

```{r}
#assigning variable names
wins <- bd$W
at_bats <- bd$AB
hits <- bd$H
walks <- bd$BB
home_runs <- bd$HR
runs <- bd$R
runs_against <- bd$RA
strikeouts <- bd$SO
stolen_bases <- bd$SB
doubles <- bd$'2B'
triples <- bd$'3B'
era <- bd$ERA
shutouts <- bd$SHO
saves <- bd$SV
hr_against <- bd$HRA
walks_against <- bd$BBA
so_b_pitchers <- bd$SOA
cg_b_pitchers <- bd$CG
fielding_percent <- bd$FP
errors <- bd$E

full_model <- lm(wins ~ at_bats + hits + walks + home_runs + runs + runs_against + strikeouts + stolen_bases + doubles + triples + era + shutouts + saves + hr_against + walks_against + so_b_pitchers + cg_b_pitchers + fielding_percent + errors, data=bd)
summary(full_model)
```

```{r}
plot(full_model)
```


```{r}
runs_model <- lm(wins ~ runs + runs_against)
summary(runs_model)
```



This model contains all the original variables minus runs, runs_against, era, and fielding percentage

```{r}
plot(full_minus_runs_model)
```

### Best model so far
```{r}
backward_stepwise <- step(full_model, direction = "backward")
summary(backward_stepwise)
```

### Same as backward stepwise
```{r}
forward_stepwise <- step(full_model, direction="both", scope=full_model)
summary(forward_stepwise)
```


```{r}
full_minus_runs_model <- lm(wins ~ at_bats + hits + walks + home_runs + strikeouts + stolen_bases + doubles + triples + shutouts + saves + hr_against + walks_against + so_b_pitchers + cg_b_pitchers, data=bd)
summary(full_minus_runs_model)
```

```{r}
full_minus_runs_stepwise <- step(full_minus_runs_model, direction='backward')
summary(full_minus_runs_)
```

```{r}
simple_minus_runs_model <- lm(wins ~ at_bats + hits + walks + home_runs + stolen_bases + shutouts + saves + hr_against + walks_against + so_b_pitchers + cg_b_pitchers, data=bd)
step(simple_minus_runs_model, direction='backward')
```







Correlation coefficients for the dataframe using Wins

```{r}
cor(baseball_data$W,baseball_data)
```





## Time to scale the data

```{r}
df_scaled <- lapply(bd, function(column) scale(column, center = TRUE, scale = TRUE))

#bd_scaled
```

```{r}
#assigning variable names
wins <- df_scaled$W
at_bats <- df_scaled$AB
hits <- df_scaled$H
walks <- df_scaled$BB
home_runs <- df_scaled$HR
runs <- df_scaled$R
runs_against <- df_scaled$RA
strikeouts <- df_scaled$SO
stolen_bases <- df_scaled$SB
doubles <- df_scaled$'2B'
triples <- df_scaled$'3B'
era <- df_scaled$ERA
shutouts <- df_scaled$SHO
saves <- df_scaled$SV
hr_against <- df_scaled$HRA
walks_against <- df_scaled$BBA
so_b_pitchers <- df_scaled$SOA
cg_b_pitchers <- df_scaled$CG
fielding_percent <- df_scaled$FP

full_model_scaled <- lm(wins ~ at_bats + hits + walks + home_runs + runs + runs_against + strikeouts + stolen_bases + doubles + triples + era + shutouts + saves + hr_against + walks_against + so_b_pitchers + cg_b_pitchers + fielding_percent, data=bd)
summary(full_model_scaled)
```


```{r}
full_minus_runs_scaled <- lm(wins ~ at_bats + hits + walks + home_runs + strikeouts + stolen_bases + doubles + triples + shutouts + saves + hr_against + walks_against + so_b_pitchers + cg_b_pitchers + fielding_percent, data=bd)
summary(full_minus_runs_scaled)
```

```{r}
summary(step(full_minus_runs_scaled, direction='backward'))

```

```{r}

```

```{r}

```



